{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\nvar AnimatedSet = function (_AnimatedNode) {\n  _inherits(AnimatedSet, _AnimatedNode);\n  var _super = _createSuper(AnimatedSet);\n  function AnimatedSet(what, value) {\n    var _this;\n    _classCallCheck(this, AnimatedSet);\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \".concat(what));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \".concat(value));\n    _this = _super.call(this, {\n      type: 'set',\n      what: what,\n      value: value\n    }, [value]);\n    _defineProperty(_assertThisInitialized(_this), \"_what\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_value\", void 0);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    _this._what = what;\n    _this._value = value;\n    return _this;\n  }\n  _createClass(AnimatedSet, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedSet, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var newValue = val(this._value);\n      this._what.setValue(newValue);\n      return newValue;\n    }\n  }]);\n  return AnimatedSet;\n}(AnimatedNode);\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"names":["AnimatedNode","invariant","val","adapt","AnimatedSet","_AnimatedNode","_inherits","_super","_createSuper","what","value","_this","_classCallCheck","concat","call","type","_defineProperty","_assertThisInitialized","_constant","_what","_value","_createClass","key","toString","__nodeID","__onEvaluate","newValue","setValue","createAnimatedSet"],"sources":["/Users/negatwo/Documents/GitHub/BLN-App/frontend/node_modules/react-native-reanimated/lib/module/core/AnimatedSet.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AACA,SAASC,KAAT;AAAA,IAEMC,WAAN,aAAAC,aAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EAIE,SAAAA,YAAYK,IAAD,EAAOC,KAAP,EAAc;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,WAAA;IACvBH,SAAS,CACPQ,IAAI,YAAYT,YADT,oFAAAa,MAAA,CAE2EJ,IAF3E,EAAT;IAIAR,SAAS,CACPS,KAAK,YAAYV,YADV,uGAAAa,MAAA,CAE8FH,KAF9F,EAAT;IAIAC,KAAA,GAAAJ,MAAA,CAAAO,IAAA,OAAM;MAAEC,IAAI,EAAE,KAAR;MAAeN,IAAf,EAAeA,IAAf;MAAqBC,KAAA,EAAAA;IAArB,CAAN,EAAoC,CAACA,KAAD,CAApC;IATuBM,eAAA,CAAAC,sBAAA,CAAAN,KAAA;IAAAK,eAAA,CAAAC,sBAAA,CAAAN,KAAA;IAUvBV,SAAS,CAAC,CAACQ,IAAI,CAACS,SAAP,EAAkB,oCAAlB,CAAT;IACAP,KAAA,CAAKQ,KAAL,GAAaV,IAAb;IACAE,KAAA,CAAKS,MAAL,GAAcV,KAAd;IAAA,OAAAC,KAAA;EACD;EAAAU,YAAA,CAAAjB,WAAA;IAAAkB,GAAA;IAAAZ,KAAA,EAED,SAAAa,SAAA,EAAW;MACT,2BAAAV,MAAA,CAA2B,KAAKW,QAAhC;IACD;EAAA;IAAAF,GAAA;IAAAZ,KAAA,EAED,SAAAe,aAAA,EAAe;MACb,IAAMC,QAAQ,GAAGxB,GAAG,CAAC,KAAKkB,MAAN,CAApB;MACA,KAAKD,KAAL,CAAWQ,QAAX,CAAoBD,QAApB;MACA,OAAOA,QAAP;IACD;EAAA;EAAA,OAAAtB,WAAA;AAAA,EA3BuBJ,YAA1B;AA8BA,OAAO,SAAS4B,iBAATA,CAA2BnB,IAA3B,EAAiCC,KAAjC,EAAwC;EAC7C,OAAO,IAAIN,WAAJ,CAAgBK,IAAhB,EAAsBN,KAAK,CAACO,KAAD,CAA3B,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
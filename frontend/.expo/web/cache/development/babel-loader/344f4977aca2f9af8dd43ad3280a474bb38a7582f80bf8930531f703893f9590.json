{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'fbjs/lib/areEqual';\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value: value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(function (transform) {\n    for (var key in transform) {\n      var value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\nvar AnimatedTransform = function (_AnimatedNode) {\n  _inherits(AnimatedTransform, _AnimatedNode);\n  var _super = _createSuper(AnimatedTransform);\n  function AnimatedTransform(transform, config) {\n    var _this;\n    _classCallCheck(this, AnimatedTransform);\n    _this = _super.call(this, {\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform));\n    _this._config = config;\n    _this._transform = transform;\n    return _this;\n  }\n  _createClass(AnimatedTransform, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedTransform, id: \".concat(this.__nodeID);\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._transform.map(function (transform) {\n        var result = {};\n        for (var key in transform) {\n          var value = transform[key];\n          if (value instanceof AnimatedNode) {\n            result[key] = value.__getValue();\n          }\n        }\n        return result;\n      });\n    }\n  }]);\n  return AnimatedTransform;\n}(AnimatedNode);","map":{"version":3,"names":["AnimatedNode","deepEqual","sanitizeTransform","inputTransform","outputTransform","forEach","transform","key","value","push","property","nodeID","__nodeID","extractAnimatedParentNodes","parents","createOrReuseTransformNode","oldNode","config","_config","AnimatedTransform","_AnimatedNode","_inherits","_super","_createSuper","_this","_classCallCheck","call","type","_transform","_createClass","toString","concat","__onEvaluate","map","result","__getValue"],"sources":["/Users/negatwo/Documents/GitHub/BLN-App/frontend/node_modules/react-native-reanimated/lib/module/core/AnimatedTransform.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,YAAP;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA,SAASC,iBAATA,CAA2BC,cAA3B,EAA2C;EACzC,IAAMC,eAAe,GAAG,EAAxB;EACAD,cAAc,CAACE,OAAf,CAAuB,UAAAC,SAAS,EAAI;IAClC,KAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;MAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;MACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;QACjCI,eAAe,CAACK,IAAhB,CAAqB;UACnBC,QAAQ,EAAEH,GADS;UAEnBI,MAAM,EAAEH,KAAK,CAACI;QAFK,CAArB;MAID,CALD,MAKO;QACLR,eAAe,CAACK,IAAhB,CAAqB;UACnBC,QAAQ,EAAEH,GADS;UAEnBC,KAAA,EAAAA;QAFmB,CAArB;MAID;IACF;EACF,CAfD;EAgBA,OAAOJ,eAAP;AACD;AAED,SAASS,0BAATA,CAAoCP,SAApC,EAA+C;EAC7C,IAAMQ,OAAO,GAAG,EAAhB;EACAR,SAAS,CAACD,OAAV,CAAkB,UAAAC,SAAS,EAAI;IAC7B,KAAK,IAAMC,GAAX,IAAkBD,SAAlB,EAA6B;MAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;MACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;QACjCc,OAAO,CAACL,IAAR,CAAaD,KAAb;MACD;IACF;EACF,CAPD;EAQA,OAAOM,OAAP;AACD;AAED,OAAO,SAASC,0BAATA,CAAoCT,SAApC,EAA+CU,OAA/C,EAAwD;EAC7D,IAAMC,MAAM,GAAGf,iBAAiB,CAACI,SAAD,CAAhC;EACA,IAAIU,OAAO,IAAIf,SAAS,CAACgB,MAAD,EAASD,OAAO,CAACE,OAAjB,CAAxB,EAAmD;IACjD,OAAOF,OAAP;EACD;EACD,OAAO,IAAIG,iBAAJ,CAAsBb,SAAtB,EAAiCW,MAAjC,CAAP;AACD;AAAA,IAEKE,iBAAN,aAAAC,aAAA;EAAAC,SAAA,CAAAF,iBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,iBAAA;EACE,SAAAA,kBAAYb,SAAD,EAAYW,MAAZ,EAAoB;IAAA,IAAAO,KAAA;IAAAC,eAAA,OAAAN,iBAAA;IAC7BK,KAAA,GAAAF,MAAA,CAAAI,IAAA,OACE;MAAEC,IAAI,EAAE,WAAR;MAAqBrB,SAAS,EAAEW;IAAhC,CADF,EAEEJ,0BAA0B,CAACP,SAAD,CAF5B;IAIAkB,KAAA,CAAKN,OAAL,GAAeD,MAAf;IACAO,KAAA,CAAKI,UAAL,GAAkBtB,SAAlB;IAAA,OAAAkB,KAAA;EACD;EAAAK,YAAA,CAAAV,iBAAA;IAAAZ,GAAA;IAAAC,KAAA,EAED,SAAAsB,SAAA,EAAW;MACT,iCAAAC,MAAA,CAAiC,KAAKnB,QAAtC;IACD;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAwB,aAAA,EAAe;MACb,OAAO,KAAKJ,UAAL,CAAgBK,GAAhB,CAAoB,UAAA3B,SAAS,EAAI;QACtC,IAAM4B,MAAM,GAAG,EAAf;QACA,KAAK,IAAM3B,GAAX,IAAkBD,SAAlB,EAA6B;UAC3B,IAAME,KAAK,GAAGF,SAAS,CAACC,GAAD,CAAvB;UACA,IAAIC,KAAK,YAAYR,YAArB,EAAmC;YACjCkC,MAAM,CAAC3B,GAAD,CAAN,GAAcC,KAAK,CAAC2B,UAAN,EAAd;UACD;QACF;QACD,OAAOD,MAAP;MACD,CATM,CAAP;IAUD;EAAA;EAAA,OAAAf,iBAAA;AAAA,EAzB6BnB,YAAhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
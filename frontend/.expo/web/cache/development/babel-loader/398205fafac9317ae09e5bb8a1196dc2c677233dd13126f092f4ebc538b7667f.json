{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nvar AnimatedConcat = function (_AnimatedNode) {\n  _inherits(AnimatedConcat, _AnimatedNode);\n  var _super = _createSuper(AnimatedConcat);\n  function AnimatedConcat(input) {\n    var _this;\n    _classCallCheck(this, AnimatedConcat);\n    invariant(input.every(function (el) {\n      return el instanceof AnimatedNode || typeof el === 'number' || typeof el === 'string';\n    }), \"Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: \".concat(input));\n    _this = _super.call(this, {\n      type: 'concat',\n      input: input\n    }, input);\n    _this._input = input;\n    return _this;\n  }\n  _createClass(AnimatedConcat, [{\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._input.reduce(function (prev, current) {\n        return prev + val(current);\n      }, '');\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedConcat, id: \".concat(this.__nodeID);\n    }\n  }]);\n  return AnimatedConcat;\n}(AnimatedNode);\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"names":["invariant","adapt","AnimatedNode","val","AnimatedConcat","_AnimatedNode","_inherits","_super","_createSuper","input","_this","_classCallCheck","every","el","concat","call","type","_input","_createClass","key","value","__onEvaluate","reduce","prev","current","toString","__nodeID","createAnimatedConcat","_len","arguments","length","args","Array","_key","map"],"sources":["/Users/negatwo/Documents/GitHub/BLN-App/frontend/node_modules/react-native-reanimated/lib/module/core/AnimatedConcat.js"],"sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,KAAT;AACA,OAAOC,YAAP;AACA,SAASC,GAAT;AAAA,IAEMC,cAAN,aAAAC,aAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EACE,SAAAA,eAAYK,KAAD,EAAQ;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,cAAA;IACjBJ,SAAS,CACPS,KAAK,CAACG,KAAN,CACE,UAAAC,EAAE;MAAA,OACAA,EAAE,YAAYX,YAAd,IACA,OAAOW,EAAP,KAAc,QADd,IAEA,OAAOA,EAAP,KAAc,QAJlB;IAAA,EADO,oJAAAC,MAAA,CAO2IL,KAP3I,EAAT;IASAC,KAAA,GAAAH,MAAA,CAAAQ,IAAA,OAAM;MAAEC,IAAI,EAAE,QAAR;MAAkBP,KAAA,EAAAA;IAAlB,CAAN,EAAiCA,KAAjC;IACAC,KAAA,CAAKO,MAAL,GAAcR,KAAd;IAAA,OAAAC,KAAA;EACD;EAAAQ,YAAA,CAAAd,cAAA;IAAAe,GAAA;IAAAC,KAAA,EAED,SAAAC,aAAA,EAAe;MACb,OAAO,KAAKJ,MAAL,CAAYK,MAAZ,CAAmB,UAACC,IAAD,EAAOC,OAAP;QAAA,OAAmBD,IAAI,GAAGpB,GAAG,CAACqB,OAAD,CAAhD;MAAA,GAA2D,EAA3D,CAAP;IACD;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAK,SAAA,EAAW;MACT,8BAAAX,MAAA,CAA8B,KAAKY,QAAnC;IACD;EAAA;EAAA,OAAAtB,cAAA;AAAA,EArB0BF,YAA7B;AAwBA,OAAO,SAASyB,oBAATA,CAAA,EAAuC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAjC,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAiCF,IAAjC,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACL,OAAO,IAAI7B,cAAJ,CAAmB2B,IAAI,CAACG,GAAL,CAASjC,KAAT,CAAnB,CAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}
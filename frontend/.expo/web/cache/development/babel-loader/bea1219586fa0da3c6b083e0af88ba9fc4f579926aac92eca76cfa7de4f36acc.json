{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport invariant from 'fbjs/lib/invariant';\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\nvar CONSTANT_VALUES = new Map();\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(function (v) {\n    return CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true));\n  });\n}\nvar InternalAnimatedValue = function (_AnimatedNode) {\n  _inherits(InternalAnimatedValue, _AnimatedNode);\n  var _super = _createSuper(InternalAnimatedValue);\n  function InternalAnimatedValue(value) {\n    var _this;\n    var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _classCallCheck(this, InternalAnimatedValue);\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    _this = _super.call(this, {\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    _this._startingValue = _this._value = value;\n    _this._animation = null;\n    _this._constant = constant;\n    return _this;\n  }\n  _createClass(InternalAnimatedValue, [{\n    key: \"__detach\",\n    value: function __detach() {\n      var _this2 = this;\n      if (!this._constant) {\n        if (ReanimatedModule.getValue) {\n          ReanimatedModule.getValue(this.__nodeID, function (val) {\n            return _this2.__nodeConfig.value = val;\n          });\n        } else {\n          this.__nodeConfig.value = this.__getValue();\n        }\n      }\n      this.__detachAnimation(this._animation);\n      _get(_getPrototypeOf(InternalAnimatedValue.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__detachAnimation\",\n    value: function __detachAnimation(animation) {\n      animation && animation.__detach();\n      if (this._animation === animation) {\n        this._animation = null;\n      }\n    }\n  }, {\n    key: \"__attachAnimation\",\n    value: function __attachAnimation(animation) {\n      this.__detachAnimation(this._animation);\n      this._animation = animation;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      if (this.__inputNodes && this.__inputNodes.length) {\n        this.__inputNodes.forEach(val);\n      }\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this.__detachAnimation(this._animation);\n      this._updateValue(value);\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue(value) {\n      this._value = value;\n      this.__forceUpdateCache(value);\n    }\n  }], [{\n    key: \"valueForConstant\",\n    value: function valueForConstant(number) {\n      initializeConstantValues();\n      return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n    }\n  }]);\n  return InternalAnimatedValue;\n}(AnimatedNode);\nexport { InternalAnimatedValue as default };","map":{"version":3,"names":["AnimatedNode","val","ReanimatedModule","invariant","sanitizeValue","value","undefined","Number","CONSTANT_VALUES","Map","initializeConstantValues","size","forEach","v","set","InternalAnimatedValue","_AnimatedNode","_inherits","_super","_createSuper","_this","constant","arguments","length","_classCallCheck","call","type","_startingValue","_value","_animation","_constant","_createClass","key","__detach","_this2","getValue","__nodeID","__nodeConfig","__getValue","__detachAnimation","_get","_getPrototypeOf","prototype","animation","__attachAnimation","__onEvaluate","__inputNodes","setValue","_updateValue","__forceUpdateCache","valueForConstant","number","get","default"],"sources":["/Users/negatwo/Documents/GitHub/BLN-App/frontend/node_modules/react-native-reanimated/lib/module/core/InternalAnimatedValue.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(\n      value !== null,\n      'Animated.Value cannot be set to the null'\n    );\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}